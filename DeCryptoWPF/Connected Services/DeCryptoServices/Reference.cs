//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeCryptoWPF.DeCryptoServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool emailVerifyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] profileImageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool emailVerify {
            get {
                return this.emailVerifyField;
            }
            set {
                if ((this.emailVerifyField.Equals(value) != true)) {
                    this.emailVerifyField = value;
                    this.RaisePropertyChanged("emailVerify");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] profileImage {
            get {
                return this.profileImageField;
            }
            set {
                if ((object.ReferenceEquals(this.profileImageField, value) != true)) {
                    this.profileImageField = value;
                    this.RaisePropertyChanged("profileImage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string accountNicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string birthDayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string accountNickname {
            get {
                return this.accountNicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.accountNicknameField, value) != true)) {
                    this.accountNicknameField = value;
                    this.RaisePropertyChanged("accountNickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string birthDay {
            get {
                return this.birthDayField;
            }
            set {
                if ((object.ReferenceEquals(this.birthDayField, value) != true)) {
                    this.birthDayField = value;
                    this.RaisePropertyChanged("birthDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idUser {
            get {
                return this.idUserField;
            }
            set {
                if ((this.idUserField.Equals(value) != true)) {
                    this.idUserField = value;
                    this.RaisePropertyChanged("idUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlueTeam", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class BlueTeam : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool allreadySetCluesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool allreadySetGuessesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[][] cluesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int interceptionsPointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int missComunicationsPointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknamePlayer1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknamePlayer2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] wordListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool allreadySetClues {
            get {
                return this.allreadySetCluesField;
            }
            set {
                if ((this.allreadySetCluesField.Equals(value) != true)) {
                    this.allreadySetCluesField = value;
                    this.RaisePropertyChanged("allreadySetClues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool allreadySetGuesses {
            get {
                return this.allreadySetGuessesField;
            }
            set {
                if ((this.allreadySetGuessesField.Equals(value) != true)) {
                    this.allreadySetGuessesField = value;
                    this.RaisePropertyChanged("allreadySetGuesses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[][] clues {
            get {
                return this.cluesField;
            }
            set {
                if ((object.ReferenceEquals(this.cluesField, value) != true)) {
                    this.cluesField = value;
                    this.RaisePropertyChanged("clues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int interceptionsPoints {
            get {
                return this.interceptionsPointsField;
            }
            set {
                if ((this.interceptionsPointsField.Equals(value) != true)) {
                    this.interceptionsPointsField = value;
                    this.RaisePropertyChanged("interceptionsPoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int missComunicationsPoints {
            get {
                return this.missComunicationsPointsField;
            }
            set {
                if ((this.missComunicationsPointsField.Equals(value) != true)) {
                    this.missComunicationsPointsField = value;
                    this.RaisePropertyChanged("missComunicationsPoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nicknamePlayer1 {
            get {
                return this.nicknamePlayer1Field;
            }
            set {
                if ((object.ReferenceEquals(this.nicknamePlayer1Field, value) != true)) {
                    this.nicknamePlayer1Field = value;
                    this.RaisePropertyChanged("nicknamePlayer1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nicknamePlayer2 {
            get {
                return this.nicknamePlayer2Field;
            }
            set {
                if ((object.ReferenceEquals(this.nicknamePlayer2Field, value) != true)) {
                    this.nicknamePlayer2Field = value;
                    this.RaisePropertyChanged("nicknamePlayer2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] wordList {
            get {
                return this.wordListField;
            }
            set {
                if ((object.ReferenceEquals(this.wordListField, value) != true)) {
                    this.wordListField = value;
                    this.RaisePropertyChanged("wordList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedTeam", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class RedTeam : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool allreadySetCluesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool allreadySetGuessesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[][] cluesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int interceptionsPointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int missComunicationsPointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknamePlayer1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknamePlayer2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] wordListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool allreadySetClues {
            get {
                return this.allreadySetCluesField;
            }
            set {
                if ((this.allreadySetCluesField.Equals(value) != true)) {
                    this.allreadySetCluesField = value;
                    this.RaisePropertyChanged("allreadySetClues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool allreadySetGuesses {
            get {
                return this.allreadySetGuessesField;
            }
            set {
                if ((this.allreadySetGuessesField.Equals(value) != true)) {
                    this.allreadySetGuessesField = value;
                    this.RaisePropertyChanged("allreadySetGuesses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[][] clues {
            get {
                return this.cluesField;
            }
            set {
                if ((object.ReferenceEquals(this.cluesField, value) != true)) {
                    this.cluesField = value;
                    this.RaisePropertyChanged("clues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int interceptionsPoints {
            get {
                return this.interceptionsPointsField;
            }
            set {
                if ((this.interceptionsPointsField.Equals(value) != true)) {
                    this.interceptionsPointsField = value;
                    this.RaisePropertyChanged("interceptionsPoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int missComunicationsPoints {
            get {
                return this.missComunicationsPointsField;
            }
            set {
                if ((this.missComunicationsPointsField.Equals(value) != true)) {
                    this.missComunicationsPointsField = value;
                    this.RaisePropertyChanged("missComunicationsPoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nicknamePlayer1 {
            get {
                return this.nicknamePlayer1Field;
            }
            set {
                if ((object.ReferenceEquals(this.nicknamePlayer1Field, value) != true)) {
                    this.nicknamePlayer1Field = value;
                    this.RaisePropertyChanged("nicknamePlayer1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nicknamePlayer2 {
            get {
                return this.nicknamePlayer2Field;
            }
            set {
                if ((object.ReferenceEquals(this.nicknamePlayer2Field, value) != true)) {
                    this.nicknamePlayer2Field = value;
                    this.RaisePropertyChanged("nicknamePlayer2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] wordList {
            get {
                return this.wordListField;
            }
            set {
                if ((object.ReferenceEquals(this.wordListField, value) != true)) {
                    this.wordListField = value;
                    this.RaisePropertyChanged("wordList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessage", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class ChatMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string timeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string time {
            get {
                return this.timeField;
            }
            set {
                if ((object.ReferenceEquals(this.timeField, value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameConfiguration", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class GameConfiguration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeCryptoWPF.DeCryptoServices.BlueTeam blueTeamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberOfRoundsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeCryptoWPF.DeCryptoServices.RedTeam redTeamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int roundNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostNickname {
            get {
                return this.HostNicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNicknameField, value) != true)) {
                    this.HostNicknameField = value;
                    this.RaisePropertyChanged("HostNickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam {
            get {
                return this.blueTeamField;
            }
            set {
                if ((object.ReferenceEquals(this.blueTeamField, value) != true)) {
                    this.blueTeamField = value;
                    this.RaisePropertyChanged("blueTeam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numberOfRounds {
            get {
                return this.numberOfRoundsField;
            }
            set {
                if ((this.numberOfRoundsField.Equals(value) != true)) {
                    this.numberOfRoundsField = value;
                    this.RaisePropertyChanged("numberOfRounds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeCryptoWPF.DeCryptoServices.RedTeam redTeam {
            get {
                return this.redTeamField;
            }
            set {
                if ((object.ReferenceEquals(this.redTeamField, value) != true)) {
                    this.redTeamField = value;
                    this.RaisePropertyChanged("redTeam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int roundNumber {
            get {
                return this.roundNumberField;
            }
            set {
                if ((this.roundNumberField.Equals(value) != true)) {
                    this.roundNumberField = value;
                    this.RaisePropertyChanged("roundNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IAccountServices")]
    public interface IAccountServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/RegisterAccount", ReplyAction="http://tempuri.org/IAccountServices/RegisterAccountResponse")]
        bool RegisterAccount(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/RegisterAccount", ReplyAction="http://tempuri.org/IAccountServices/RegisterAccountResponse")]
        System.Threading.Tasks.Task<bool> RegisterAccountAsync(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/Login", ReplyAction="http://tempuri.org/IAccountServices/LoginResponse")]
        DeCryptoWPF.DeCryptoServices.Account Login(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/Login", ReplyAction="http://tempuri.org/IAccountServices/LoginResponse")]
        System.Threading.Tasks.Task<DeCryptoWPF.DeCryptoServices.Account> LoginAsync(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/LoginAsGuest", ReplyAction="http://tempuri.org/IAccountServices/LoginAsGuestResponse")]
        DeCryptoWPF.DeCryptoServices.Account LoginAsGuest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/LoginAsGuest", ReplyAction="http://tempuri.org/IAccountServices/LoginAsGuestResponse")]
        System.Threading.Tasks.Task<DeCryptoWPF.DeCryptoServices.Account> LoginAsGuestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/SendToken", ReplyAction="http://tempuri.org/IAccountServices/SendTokenResponse")]
        bool SendToken(string email, string title, string message, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/SendToken", ReplyAction="http://tempuri.org/IAccountServices/SendTokenResponse")]
        System.Threading.Tasks.Task<bool> SendTokenAsync(string email, string title, string message, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/VerifyEmail", ReplyAction="http://tempuri.org/IAccountServices/VerifyEmailResponse")]
        bool VerifyEmail(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/VerifyEmail", ReplyAction="http://tempuri.org/IAccountServices/VerifyEmailResponse")]
        System.Threading.Tasks.Task<bool> VerifyEmailAsync(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/ChangePassword", ReplyAction="http://tempuri.org/IAccountServices/ChangePasswordResponse")]
        bool ChangePassword(DeCryptoWPF.DeCryptoServices.Account account, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/ChangePassword", ReplyAction="http://tempuri.org/IAccountServices/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(DeCryptoWPF.DeCryptoServices.Account account, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/IsCurrentPassword", ReplyAction="http://tempuri.org/IAccountServices/IsCurrentPasswordResponse")]
        bool IsCurrentPassword(DeCryptoWPF.DeCryptoServices.Account account, string currentPasswor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/IsCurrentPassword", ReplyAction="http://tempuri.org/IAccountServices/IsCurrentPasswordResponse")]
        System.Threading.Tasks.Task<bool> IsCurrentPasswordAsync(DeCryptoWPF.DeCryptoServices.Account account, string currentPasswor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/ExistAccount", ReplyAction="http://tempuri.org/IAccountServices/ExistAccountResponse")]
        bool ExistAccount(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/ExistAccount", ReplyAction="http://tempuri.org/IAccountServices/ExistAccountResponse")]
        System.Threading.Tasks.Task<bool> ExistAccountAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountServicesChannel : DeCryptoWPF.DeCryptoServices.IAccountServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountServicesClient : System.ServiceModel.ClientBase<DeCryptoWPF.DeCryptoServices.IAccountServices>, DeCryptoWPF.DeCryptoServices.IAccountServices {
        
        public AccountServicesClient() {
        }
        
        public AccountServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterAccount(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.RegisterAccount(account);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAccountAsync(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.RegisterAccountAsync(account);
        }
        
        public DeCryptoWPF.DeCryptoServices.Account Login(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.Login(account);
        }
        
        public System.Threading.Tasks.Task<DeCryptoWPF.DeCryptoServices.Account> LoginAsync(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.LoginAsync(account);
        }
        
        public DeCryptoWPF.DeCryptoServices.Account LoginAsGuest() {
            return base.Channel.LoginAsGuest();
        }
        
        public System.Threading.Tasks.Task<DeCryptoWPF.DeCryptoServices.Account> LoginAsGuestAsync() {
            return base.Channel.LoginAsGuestAsync();
        }
        
        public bool SendToken(string email, string title, string message, int code) {
            return base.Channel.SendToken(email, title, message, code);
        }
        
        public System.Threading.Tasks.Task<bool> SendTokenAsync(string email, string title, string message, int code) {
            return base.Channel.SendTokenAsync(email, title, message, code);
        }
        
        public bool VerifyEmail(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.VerifyEmail(account);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyEmailAsync(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.VerifyEmailAsync(account);
        }
        
        public bool ChangePassword(DeCryptoWPF.DeCryptoServices.Account account, string newPassword) {
            return base.Channel.ChangePassword(account, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(DeCryptoWPF.DeCryptoServices.Account account, string newPassword) {
            return base.Channel.ChangePasswordAsync(account, newPassword);
        }
        
        public bool IsCurrentPassword(DeCryptoWPF.DeCryptoServices.Account account, string currentPasswor) {
            return base.Channel.IsCurrentPassword(account, currentPasswor);
        }
        
        public System.Threading.Tasks.Task<bool> IsCurrentPasswordAsync(DeCryptoWPF.DeCryptoServices.Account account, string currentPasswor) {
            return base.Channel.IsCurrentPasswordAsync(account, currentPasswor);
        }
        
        public bool ExistAccount(string email) {
            return base.Channel.ExistAccount(email);
        }
        
        public System.Threading.Tasks.Task<bool> ExistAccountAsync(string email) {
            return base.Channel.ExistAccountAsync(email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IPlayerServices")]
    public interface IPlayerServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerServices/RegisterPlayerResponse")]
        bool RegisterPlayer(DeCryptoWPF.DeCryptoServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerServices/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<bool> RegisterPlayerAsync(DeCryptoWPF.DeCryptoServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/GetSimilarsNickNames", ReplyAction="http://tempuri.org/IPlayerServices/GetSimilarsNickNamesResponse")]
        string[] GetSimilarsNickNames(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/GetSimilarsNickNames", ReplyAction="http://tempuri.org/IPlayerServices/GetSimilarsNickNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetSimilarsNickNamesAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/ExistNickname", ReplyAction="http://tempuri.org/IPlayerServices/ExistNicknameResponse")]
        bool ExistNickname(string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/ExistNickname", ReplyAction="http://tempuri.org/IPlayerServices/ExistNicknameResponse")]
        System.Threading.Tasks.Task<bool> ExistNicknameAsync(string nickName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServicesChannel : DeCryptoWPF.DeCryptoServices.IPlayerServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerServicesClient : System.ServiceModel.ClientBase<DeCryptoWPF.DeCryptoServices.IPlayerServices>, DeCryptoWPF.DeCryptoServices.IPlayerServices {
        
        public PlayerServicesClient() {
        }
        
        public PlayerServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterPlayer(DeCryptoWPF.DeCryptoServices.User user) {
            return base.Channel.RegisterPlayer(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPlayerAsync(DeCryptoWPF.DeCryptoServices.User user) {
            return base.Channel.RegisterPlayerAsync(user);
        }
        
        public string[] GetSimilarsNickNames(string nickname) {
            return base.Channel.GetSimilarsNickNames(nickname);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSimilarsNickNamesAsync(string nickname) {
            return base.Channel.GetSimilarsNickNamesAsync(nickname);
        }
        
        public bool ExistNickname(string nickName) {
            return base.Channel.ExistNickname(nickName);
        }
        
        public System.Threading.Tasks.Task<bool> ExistNicknameAsync(string nickName) {
            return base.Channel.ExistNicknameAsync(nickName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IJoinToGame", CallbackContract=typeof(DeCryptoWPF.DeCryptoServices.IJoinToGameCallback))]
    public interface IJoinToGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/CreateRoom", ReplyAction="http://tempuri.org/IJoinToGame/CreateRoomResponse")]
        int CreateRoom(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/CreateRoom", ReplyAction="http://tempuri.org/IJoinToGame/CreateRoomResponse")]
        System.Threading.Tasks.Task<int> CreateRoomAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToRoom")]
        void JoinToRoom(int code, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToRoom")]
        System.Threading.Tasks.Task JoinToRoomAsync(int code, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/LeaveRoom", ReplyAction="http://tempuri.org/IJoinToGame/LeaveRoomResponse")]
        void LeaveRoom(string nickname, int code, DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, DeCryptoWPF.DeCryptoServices.RedTeam redTeam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/LeaveRoom", ReplyAction="http://tempuri.org/IJoinToGame/LeaveRoomResponse")]
        System.Threading.Tasks.Task LeaveRoomAsync(string nickname, int code, DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, DeCryptoWPF.DeCryptoServices.RedTeam redTeam);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToBlueTeam")]
        void JoinToBlueTeam(DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToBlueTeam")]
        System.Threading.Tasks.Task JoinToBlueTeamAsync(DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToRedTeam")]
        void JoinToRedTeam(DeCryptoWPF.DeCryptoServices.RedTeam redTeam, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToRedTeam")]
        System.Threading.Tasks.Task JoinToRedTeamAsync(DeCryptoWPF.DeCryptoServices.RedTeam redTeam, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/JoinToGame", ReplyAction="http://tempuri.org/IJoinToGame/JoinToGameResponse")]
        void JoinToGame(string nickname, byte[] profilePicture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/JoinToGame", ReplyAction="http://tempuri.org/IJoinToGame/JoinToGameResponse")]
        System.Threading.Tasks.Task JoinToGameAsync(string nickname, byte[] profilePicture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/LeaveGame", ReplyAction="http://tempuri.org/IJoinToGame/LeaveGameResponse")]
        void LeaveGame(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/LeaveGame", ReplyAction="http://tempuri.org/IJoinToGame/LeaveGameResponse")]
        System.Threading.Tasks.Task LeaveGameAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/StartGame")]
        void StartGame(int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(int code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJoinToGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/RecivePlayers", ReplyAction="http://tempuri.org/IJoinToGame/RecivePlayersResponse")]
        void RecivePlayers(System.Collections.Generic.Dictionary<string, byte[]> profiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/ReciveBlueTeam", ReplyAction="http://tempuri.org/IJoinToGame/ReciveBlueTeamResponse")]
        void ReciveBlueTeam(DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/ReciveRedTeam", ReplyAction="http://tempuri.org/IJoinToGame/ReciveRedTeamResponse")]
        void ReciveRedTeam(DeCryptoWPF.DeCryptoServices.RedTeam redTeam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/GoToGameWindow", ReplyAction="http://tempuri.org/IJoinToGame/GoToGameWindowResponse")]
        void GoToGameWindow();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJoinToGameChannel : DeCryptoWPF.DeCryptoServices.IJoinToGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JoinToGameClient : System.ServiceModel.DuplexClientBase<DeCryptoWPF.DeCryptoServices.IJoinToGame>, DeCryptoWPF.DeCryptoServices.IJoinToGame {
        
        public JoinToGameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public JoinToGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public JoinToGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public JoinToGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public JoinToGameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int CreateRoom(string nickname) {
            return base.Channel.CreateRoom(nickname);
        }
        
        public System.Threading.Tasks.Task<int> CreateRoomAsync(string nickname) {
            return base.Channel.CreateRoomAsync(nickname);
        }
        
        public void JoinToRoom(int code, string nickname) {
            base.Channel.JoinToRoom(code, nickname);
        }
        
        public System.Threading.Tasks.Task JoinToRoomAsync(int code, string nickname) {
            return base.Channel.JoinToRoomAsync(code, nickname);
        }
        
        public void LeaveRoom(string nickname, int code, DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, DeCryptoWPF.DeCryptoServices.RedTeam redTeam) {
            base.Channel.LeaveRoom(nickname, code, blueTeam, redTeam);
        }
        
        public System.Threading.Tasks.Task LeaveRoomAsync(string nickname, int code, DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, DeCryptoWPF.DeCryptoServices.RedTeam redTeam) {
            return base.Channel.LeaveRoomAsync(nickname, code, blueTeam, redTeam);
        }
        
        public void JoinToBlueTeam(DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, int code) {
            base.Channel.JoinToBlueTeam(blueTeam, code);
        }
        
        public System.Threading.Tasks.Task JoinToBlueTeamAsync(DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, int code) {
            return base.Channel.JoinToBlueTeamAsync(blueTeam, code);
        }
        
        public void JoinToRedTeam(DeCryptoWPF.DeCryptoServices.RedTeam redTeam, int code) {
            base.Channel.JoinToRedTeam(redTeam, code);
        }
        
        public System.Threading.Tasks.Task JoinToRedTeamAsync(DeCryptoWPF.DeCryptoServices.RedTeam redTeam, int code) {
            return base.Channel.JoinToRedTeamAsync(redTeam, code);
        }
        
        public void JoinToGame(string nickname, byte[] profilePicture) {
            base.Channel.JoinToGame(nickname, profilePicture);
        }
        
        public System.Threading.Tasks.Task JoinToGameAsync(string nickname, byte[] profilePicture) {
            return base.Channel.JoinToGameAsync(nickname, profilePicture);
        }
        
        public void LeaveGame(string nickname) {
            base.Channel.LeaveGame(nickname);
        }
        
        public System.Threading.Tasks.Task LeaveGameAsync(string nickname) {
            return base.Channel.LeaveGameAsync(nickname);
        }
        
        public void StartGame(int code) {
            base.Channel.StartGame(code);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(int code) {
            return base.Channel.StartGameAsync(code);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IChatMessage", CallbackContract=typeof(DeCryptoWPF.DeCryptoServices.IChatMessageCallback))]
    public interface IChatMessage {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMessage/SendMessage")]
        void SendMessage(DeCryptoWPF.DeCryptoServices.ChatMessage chatMessage, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMessage/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(DeCryptoWPF.DeCryptoServices.ChatMessage chatMessage, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMessage/JoinChat")]
        void JoinChat(string nickname, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMessage/JoinChat")]
        System.Threading.Tasks.Task JoinChatAsync(string nickname, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMessage/LeaveChat", ReplyAction="http://tempuri.org/IChatMessage/LeaveChatResponse")]
        void LeaveChat(string nickname, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMessage/LeaveChat", ReplyAction="http://tempuri.org/IChatMessage/LeaveChatResponse")]
        System.Threading.Tasks.Task LeaveChatAsync(string nickname, int code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatMessageCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMessage/ReceiveChatMessages", ReplyAction="http://tempuri.org/IChatMessage/ReceiveChatMessagesResponse")]
        void ReceiveChatMessages(DeCryptoWPF.DeCryptoServices.ChatMessage[] messages);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatMessageChannel : DeCryptoWPF.DeCryptoServices.IChatMessage, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatMessageClient : System.ServiceModel.DuplexClientBase<DeCryptoWPF.DeCryptoServices.IChatMessage>, DeCryptoWPF.DeCryptoServices.IChatMessage {
        
        public ChatMessageClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatMessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatMessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatMessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatMessageClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(DeCryptoWPF.DeCryptoServices.ChatMessage chatMessage, int code) {
            base.Channel.SendMessage(chatMessage, code);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(DeCryptoWPF.DeCryptoServices.ChatMessage chatMessage, int code) {
            return base.Channel.SendMessageAsync(chatMessage, code);
        }
        
        public void JoinChat(string nickname, int code) {
            base.Channel.JoinChat(nickname, code);
        }
        
        public System.Threading.Tasks.Task JoinChatAsync(string nickname, int code) {
            return base.Channel.JoinChatAsync(nickname, code);
        }
        
        public void LeaveChat(string nickname, int code) {
            base.Channel.LeaveChat(nickname, code);
        }
        
        public System.Threading.Tasks.Task LeaveChatAsync(string nickname, int code) {
            return base.Channel.LeaveChatAsync(nickname, code);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IFriendsServices", CallbackContract=typeof(DeCryptoWPF.DeCryptoServices.IFriendsServicesCallback))]
    public interface IFriendsServices {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsServices/SendFriendRequest")]
        void SendFriendRequest(string senderNickname, string recipientNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsServices/SendFriendRequest")]
        System.Threading.Tasks.Task SendFriendRequestAsync(string senderNickname, string recipientNickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsServices/GetFriendList", ReplyAction="http://tempuri.org/IFriendsServices/GetFriendListResponse")]
        System.Collections.Generic.Dictionary<string, byte[]> GetFriendList(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsServices/GetFriendList", ReplyAction="http://tempuri.org/IFriendsServices/GetFriendListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, byte[]>> GetFriendListAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsServices/AcceptFriendRequest")]
        void AcceptFriendRequest(string senderNickname, string recipientNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsServices/AcceptFriendRequest")]
        System.Threading.Tasks.Task AcceptFriendRequestAsync(string senderNickname, string recipientNickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsServices/jointToFriendRequestService", ReplyAction="http://tempuri.org/IFriendsServices/jointToFriendRequestServiceResponse")]
        void jointToFriendRequestService(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsServices/jointToFriendRequestService", ReplyAction="http://tempuri.org/IFriendsServices/jointToFriendRequestServiceResponse")]
        System.Threading.Tasks.Task jointToFriendRequestServiceAsync(string nickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsServicesCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsServices/ReciveFriendRequest", ReplyAction="http://tempuri.org/IFriendsServices/ReciveFriendRequestResponse")]
        void ReciveFriendRequest(string senderNickname, string[] friendRequestList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsServices/SetFriendList", ReplyAction="http://tempuri.org/IFriendsServices/SetFriendListResponse")]
        void SetFriendList(string[] friendList);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsServicesChannel : DeCryptoWPF.DeCryptoServices.IFriendsServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendsServicesClient : System.ServiceModel.DuplexClientBase<DeCryptoWPF.DeCryptoServices.IFriendsServices>, DeCryptoWPF.DeCryptoServices.IFriendsServices {
        
        public FriendsServicesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendsServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendsServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsServicesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendFriendRequest(string senderNickname, string recipientNickname) {
            base.Channel.SendFriendRequest(senderNickname, recipientNickname);
        }
        
        public System.Threading.Tasks.Task SendFriendRequestAsync(string senderNickname, string recipientNickname) {
            return base.Channel.SendFriendRequestAsync(senderNickname, recipientNickname);
        }
        
        public System.Collections.Generic.Dictionary<string, byte[]> GetFriendList(string nickname) {
            return base.Channel.GetFriendList(nickname);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, byte[]>> GetFriendListAsync(string nickname) {
            return base.Channel.GetFriendListAsync(nickname);
        }
        
        public void AcceptFriendRequest(string senderNickname, string recipientNickname) {
            base.Channel.AcceptFriendRequest(senderNickname, recipientNickname);
        }
        
        public System.Threading.Tasks.Task AcceptFriendRequestAsync(string senderNickname, string recipientNickname) {
            return base.Channel.AcceptFriendRequestAsync(senderNickname, recipientNickname);
        }
        
        public void jointToFriendRequestService(string nickname) {
            base.Channel.jointToFriendRequestService(nickname);
        }
        
        public System.Threading.Tasks.Task jointToFriendRequestServiceAsync(string nickname) {
            return base.Channel.jointToFriendRequestServiceAsync(nickname);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IGameServices", CallbackContract=typeof(DeCryptoWPF.DeCryptoServices.IGameServicesCallback))]
    public interface IGameServices {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/JoinToGameBoard")]
        void JoinToGameBoard(byte[] profilePicture, string nickname, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/JoinToGameBoard")]
        System.Threading.Tasks.Task JoinToGameBoardAsync(byte[] profilePicture, string nickname, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/MakeWaitForClues")]
        void MakeWaitForClues(string targetNickname, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/MakeWaitForClues")]
        System.Threading.Tasks.Task MakeWaitForCluesAsync(string targetNickname, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetBlueTeamWords", ReplyAction="http://tempuri.org/IGameServices/GetBlueTeamWordsResponse")]
        string[] GetBlueTeamWords(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetBlueTeamWords", ReplyAction="http://tempuri.org/IGameServices/GetBlueTeamWordsResponse")]
        System.Threading.Tasks.Task<string[]> GetBlueTeamWordsAsync(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetRedTeamWords", ReplyAction="http://tempuri.org/IGameServices/GetRedTeamWordsResponse")]
        string[] GetRedTeamWords(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetRedTeamWords", ReplyAction="http://tempuri.org/IGameServices/GetRedTeamWordsResponse")]
        System.Threading.Tasks.Task<string[]> GetRedTeamWordsAsync(int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/GiveBlueTeamClues")]
        void GiveBlueTeamClues(string[] blueTeamClues, int code, string ownNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/GiveBlueTeamClues")]
        System.Threading.Tasks.Task GiveBlueTeamCluesAsync(string[] blueTeamClues, int code, string ownNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/GiveRedTeamClues")]
        void GiveRedTeamClues(string[] redTeamClues, int code, string ownNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/GiveRedTeamClues")]
        System.Threading.Tasks.Task GiveRedTeamCluesAsync(string[] redTeamClues, int code, string ownNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/GiveBlueTeamGuesses")]
        void GiveBlueTeamGuesses(string[] blueTeamGuesses, int code, string ownNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/GiveBlueTeamGuesses")]
        System.Threading.Tasks.Task GiveBlueTeamGuessesAsync(string[] blueTeamGuesses, int code, string ownNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/GiveRedTeamGesses")]
        void GiveRedTeamGesses(string[] redTeamGuesses, int code, string ownNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/GiveRedTeamGesses")]
        System.Threading.Tasks.Task GiveRedTeamGessesAsync(string[] redTeamGuesses, int code, string ownNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SubmitBlueTeamInterceptionResult")]
        void SubmitBlueTeamInterceptionResult(bool isCorrectInterception, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SubmitBlueTeamInterceptionResult")]
        System.Threading.Tasks.Task SubmitBlueTeamInterceptionResultAsync(bool isCorrectInterception, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SubmitRedTeamIntercepcionResult")]
        void SubmitRedTeamIntercepcionResult(bool isCorrectInterception, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SubmitRedTeamIntercepcionResult")]
        System.Threading.Tasks.Task SubmitRedTeamIntercepcionResultAsync(bool isCorrectInterception, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SubmitRedTeamDecryptResult")]
        void SubmitRedTeamDecryptResult(bool isCorrectDecrypt, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SubmitRedTeamDecryptResult")]
        System.Threading.Tasks.Task SubmitRedTeamDecryptResultAsync(bool isCorrectDecrypt, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SubmitBlueTeamDecryptResult")]
        void SubmitBlueTeamDecryptResult(bool isCorrectDecrypt, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SubmitBlueTeamDecryptResult")]
        System.Threading.Tasks.Task SubmitBlueTeamDecryptResultAsync(bool isCorrectDecrypt, int code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServicesCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/SetBlueTeamClues", ReplyAction="http://tempuri.org/IGameServices/SetBlueTeamCluesResponse")]
        void SetBlueTeamClues(string[][] blueTeamClues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/SetRedTeamClues", ReplyAction="http://tempuri.org/IGameServices/SetRedTeamCluesResponse")]
        void SetRedTeamClues(string[][] redTeamClues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/SetBlueTeamScore", ReplyAction="http://tempuri.org/IGameServices/SetBlueTeamScoreResponse")]
        void SetBlueTeamScore(int blueTeamInterception, int blueTeamMisComunications);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/SetRedTeamScore", ReplyAction="http://tempuri.org/IGameServices/SetRedTeamScoreResponse")]
        void SetRedTeamScore(int redTeamInterception, int redTeamMisComunications);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/WaitForGuesses", ReplyAction="http://tempuri.org/IGameServices/WaitForGuessesResponse")]
        void WaitForGuesses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/SetBoard", ReplyAction="http://tempuri.org/IGameServices/SetBoardResponse")]
        void SetBoard(DeCryptoWPF.DeCryptoServices.GameConfiguration gameConfiguration);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServicesChannel : DeCryptoWPF.DeCryptoServices.IGameServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServicesClient : System.ServiceModel.DuplexClientBase<DeCryptoWPF.DeCryptoServices.IGameServices>, DeCryptoWPF.DeCryptoServices.IGameServices {
        
        public GameServicesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServicesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void JoinToGameBoard(byte[] profilePicture, string nickname, int code) {
            base.Channel.JoinToGameBoard(profilePicture, nickname, code);
        }
        
        public System.Threading.Tasks.Task JoinToGameBoardAsync(byte[] profilePicture, string nickname, int code) {
            return base.Channel.JoinToGameBoardAsync(profilePicture, nickname, code);
        }
        
        public void MakeWaitForClues(string targetNickname, int code) {
            base.Channel.MakeWaitForClues(targetNickname, code);
        }
        
        public System.Threading.Tasks.Task MakeWaitForCluesAsync(string targetNickname, int code) {
            return base.Channel.MakeWaitForCluesAsync(targetNickname, code);
        }
        
        public string[] GetBlueTeamWords(int code) {
            return base.Channel.GetBlueTeamWords(code);
        }
        
        public System.Threading.Tasks.Task<string[]> GetBlueTeamWordsAsync(int code) {
            return base.Channel.GetBlueTeamWordsAsync(code);
        }
        
        public string[] GetRedTeamWords(int code) {
            return base.Channel.GetRedTeamWords(code);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRedTeamWordsAsync(int code) {
            return base.Channel.GetRedTeamWordsAsync(code);
        }
        
        public void GiveBlueTeamClues(string[] blueTeamClues, int code, string ownNickname) {
            base.Channel.GiveBlueTeamClues(blueTeamClues, code, ownNickname);
        }
        
        public System.Threading.Tasks.Task GiveBlueTeamCluesAsync(string[] blueTeamClues, int code, string ownNickname) {
            return base.Channel.GiveBlueTeamCluesAsync(blueTeamClues, code, ownNickname);
        }
        
        public void GiveRedTeamClues(string[] redTeamClues, int code, string ownNickname) {
            base.Channel.GiveRedTeamClues(redTeamClues, code, ownNickname);
        }
        
        public System.Threading.Tasks.Task GiveRedTeamCluesAsync(string[] redTeamClues, int code, string ownNickname) {
            return base.Channel.GiveRedTeamCluesAsync(redTeamClues, code, ownNickname);
        }
        
        public void GiveBlueTeamGuesses(string[] blueTeamGuesses, int code, string ownNickname) {
            base.Channel.GiveBlueTeamGuesses(blueTeamGuesses, code, ownNickname);
        }
        
        public System.Threading.Tasks.Task GiveBlueTeamGuessesAsync(string[] blueTeamGuesses, int code, string ownNickname) {
            return base.Channel.GiveBlueTeamGuessesAsync(blueTeamGuesses, code, ownNickname);
        }
        
        public void GiveRedTeamGesses(string[] redTeamGuesses, int code, string ownNickname) {
            base.Channel.GiveRedTeamGesses(redTeamGuesses, code, ownNickname);
        }
        
        public System.Threading.Tasks.Task GiveRedTeamGessesAsync(string[] redTeamGuesses, int code, string ownNickname) {
            return base.Channel.GiveRedTeamGessesAsync(redTeamGuesses, code, ownNickname);
        }
        
        public void SubmitBlueTeamInterceptionResult(bool isCorrectInterception, int code) {
            base.Channel.SubmitBlueTeamInterceptionResult(isCorrectInterception, code);
        }
        
        public System.Threading.Tasks.Task SubmitBlueTeamInterceptionResultAsync(bool isCorrectInterception, int code) {
            return base.Channel.SubmitBlueTeamInterceptionResultAsync(isCorrectInterception, code);
        }
        
        public void SubmitRedTeamIntercepcionResult(bool isCorrectInterception, int code) {
            base.Channel.SubmitRedTeamIntercepcionResult(isCorrectInterception, code);
        }
        
        public System.Threading.Tasks.Task SubmitRedTeamIntercepcionResultAsync(bool isCorrectInterception, int code) {
            return base.Channel.SubmitRedTeamIntercepcionResultAsync(isCorrectInterception, code);
        }
        
        public void SubmitRedTeamDecryptResult(bool isCorrectDecrypt, int code) {
            base.Channel.SubmitRedTeamDecryptResult(isCorrectDecrypt, code);
        }
        
        public System.Threading.Tasks.Task SubmitRedTeamDecryptResultAsync(bool isCorrectDecrypt, int code) {
            return base.Channel.SubmitRedTeamDecryptResultAsync(isCorrectDecrypt, code);
        }
        
        public void SubmitBlueTeamDecryptResult(bool isCorrectDecrypt, int code) {
            base.Channel.SubmitBlueTeamDecryptResult(isCorrectDecrypt, code);
        }
        
        public System.Threading.Tasks.Task SubmitBlueTeamDecryptResultAsync(bool isCorrectDecrypt, int code) {
            return base.Channel.SubmitBlueTeamDecryptResultAsync(isCorrectDecrypt, code);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IRoomServices")]
    public interface IRoomServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoomServices/IsFullRoom", ReplyAction="http://tempuri.org/IRoomServices/IsFullRoomResponse")]
        bool IsFullRoom(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoomServices/IsFullRoom", ReplyAction="http://tempuri.org/IRoomServices/IsFullRoomResponse")]
        System.Threading.Tasks.Task<bool> IsFullRoomAsync(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoomServices/AllreadyExistRoom", ReplyAction="http://tempuri.org/IRoomServices/AllreadyExistRoomResponse")]
        bool AllreadyExistRoom(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoomServices/AllreadyExistRoom", ReplyAction="http://tempuri.org/IRoomServices/AllreadyExistRoomResponse")]
        System.Threading.Tasks.Task<bool> AllreadyExistRoomAsync(int code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoomServicesChannel : DeCryptoWPF.DeCryptoServices.IRoomServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoomServicesClient : System.ServiceModel.ClientBase<DeCryptoWPF.DeCryptoServices.IRoomServices>, DeCryptoWPF.DeCryptoServices.IRoomServices {
        
        public RoomServicesClient() {
        }
        
        public RoomServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoomServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoomServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoomServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsFullRoom(int code) {
            return base.Channel.IsFullRoom(code);
        }
        
        public System.Threading.Tasks.Task<bool> IsFullRoomAsync(int code) {
            return base.Channel.IsFullRoomAsync(code);
        }
        
        public bool AllreadyExistRoom(int code) {
            return base.Channel.AllreadyExistRoom(code);
        }
        
        public System.Threading.Tasks.Task<bool> AllreadyExistRoomAsync(int code) {
            return base.Channel.AllreadyExistRoomAsync(code);
        }
    }
}
