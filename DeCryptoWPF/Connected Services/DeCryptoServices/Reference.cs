//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeCryptoWPF.DeCryptoServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool emailVerifyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] profileImageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool emailVerify {
            get {
                return this.emailVerifyField;
            }
            set {
                if ((this.emailVerifyField.Equals(value) != true)) {
                    this.emailVerifyField = value;
                    this.RaisePropertyChanged("emailVerify");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] profileImage {
            get {
                return this.profileImageField;
            }
            set {
                if ((object.ReferenceEquals(this.profileImageField, value) != true)) {
                    this.profileImageField = value;
                    this.RaisePropertyChanged("profileImage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string accountNicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string birthDayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string accountNickname {
            get {
                return this.accountNicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.accountNicknameField, value) != true)) {
                    this.accountNicknameField = value;
                    this.RaisePropertyChanged("accountNickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string birthDay {
            get {
                return this.birthDayField;
            }
            set {
                if ((object.ReferenceEquals(this.birthDayField, value) != true)) {
                    this.birthDayField = value;
                    this.RaisePropertyChanged("birthDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idUser {
            get {
                return this.idUserField;
            }
            set {
                if ((this.idUserField.Equals(value) != true)) {
                    this.idUserField = value;
                    this.RaisePropertyChanged("idUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlueTeam", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class BlueTeam : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknamePlayer1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknamePlayer2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nicknamePlayer1 {
            get {
                return this.nicknamePlayer1Field;
            }
            set {
                if ((object.ReferenceEquals(this.nicknamePlayer1Field, value) != true)) {
                    this.nicknamePlayer1Field = value;
                    this.RaisePropertyChanged("nicknamePlayer1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nicknamePlayer2 {
            get {
                return this.nicknamePlayer2Field;
            }
            set {
                if ((object.ReferenceEquals(this.nicknamePlayer2Field, value) != true)) {
                    this.nicknamePlayer2Field = value;
                    this.RaisePropertyChanged("nicknamePlayer2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedTeam", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class RedTeam : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknamePlayer1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknamePlayer2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nicknamePlayer1 {
            get {
                return this.nicknamePlayer1Field;
            }
            set {
                if ((object.ReferenceEquals(this.nicknamePlayer1Field, value) != true)) {
                    this.nicknamePlayer1Field = value;
                    this.RaisePropertyChanged("nicknamePlayer1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nicknamePlayer2 {
            get {
                return this.nicknamePlayer2Field;
            }
            set {
                if ((object.ReferenceEquals(this.nicknamePlayer2Field, value) != true)) {
                    this.nicknamePlayer2Field = value;
                    this.RaisePropertyChanged("nicknamePlayer2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessage", Namespace="http://schemas.datacontract.org/2004/07/Domain.data")]
    [System.SerializableAttribute()]
    public partial class ChatMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string timeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string time {
            get {
                return this.timeField;
            }
            set {
                if ((object.ReferenceEquals(this.timeField, value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IAccountServices")]
    public interface IAccountServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/RegisterAccount", ReplyAction="http://tempuri.org/IAccountServices/RegisterAccountResponse")]
        bool RegisterAccount(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/RegisterAccount", ReplyAction="http://tempuri.org/IAccountServices/RegisterAccountResponse")]
        System.Threading.Tasks.Task<bool> RegisterAccountAsync(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/Login", ReplyAction="http://tempuri.org/IAccountServices/LoginResponse")]
        DeCryptoWPF.DeCryptoServices.Account Login(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/Login", ReplyAction="http://tempuri.org/IAccountServices/LoginResponse")]
        System.Threading.Tasks.Task<DeCryptoWPF.DeCryptoServices.Account> LoginAsync(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/SendToken", ReplyAction="http://tempuri.org/IAccountServices/SendTokenResponse")]
        bool SendToken(string email, string title, string message, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/SendToken", ReplyAction="http://tempuri.org/IAccountServices/SendTokenResponse")]
        System.Threading.Tasks.Task<bool> SendTokenAsync(string email, string title, string message, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/VerifyEmail", ReplyAction="http://tempuri.org/IAccountServices/VerifyEmailResponse")]
        bool VerifyEmail(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/VerifyEmail", ReplyAction="http://tempuri.org/IAccountServices/VerifyEmailResponse")]
        System.Threading.Tasks.Task<bool> VerifyEmailAsync(DeCryptoWPF.DeCryptoServices.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/ChangePassword", ReplyAction="http://tempuri.org/IAccountServices/ChangePasswordResponse")]
        bool ChangePassword(DeCryptoWPF.DeCryptoServices.Account account, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/ChangePassword", ReplyAction="http://tempuri.org/IAccountServices/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(DeCryptoWPF.DeCryptoServices.Account account, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/CurrentPassword", ReplyAction="http://tempuri.org/IAccountServices/CurrentPasswordResponse")]
        bool CurrentPassword(DeCryptoWPF.DeCryptoServices.Account account, string currentPasswor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/CurrentPassword", ReplyAction="http://tempuri.org/IAccountServices/CurrentPasswordResponse")]
        System.Threading.Tasks.Task<bool> CurrentPasswordAsync(DeCryptoWPF.DeCryptoServices.Account account, string currentPasswor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/ExistAccount", ReplyAction="http://tempuri.org/IAccountServices/ExistAccountResponse")]
        bool ExistAccount(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountServices/ExistAccount", ReplyAction="http://tempuri.org/IAccountServices/ExistAccountResponse")]
        System.Threading.Tasks.Task<bool> ExistAccountAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountServicesChannel : DeCryptoWPF.DeCryptoServices.IAccountServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountServicesClient : System.ServiceModel.ClientBase<DeCryptoWPF.DeCryptoServices.IAccountServices>, DeCryptoWPF.DeCryptoServices.IAccountServices {
        
        public AccountServicesClient() {
        }
        
        public AccountServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterAccount(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.RegisterAccount(account);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAccountAsync(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.RegisterAccountAsync(account);
        }
        
        public DeCryptoWPF.DeCryptoServices.Account Login(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.Login(account);
        }
        
        public System.Threading.Tasks.Task<DeCryptoWPF.DeCryptoServices.Account> LoginAsync(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.LoginAsync(account);
        }
        
        public bool SendToken(string email, string title, string message, int code) {
            return base.Channel.SendToken(email, title, message, code);
        }
        
        public System.Threading.Tasks.Task<bool> SendTokenAsync(string email, string title, string message, int code) {
            return base.Channel.SendTokenAsync(email, title, message, code);
        }
        
        public bool VerifyEmail(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.VerifyEmail(account);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyEmailAsync(DeCryptoWPF.DeCryptoServices.Account account) {
            return base.Channel.VerifyEmailAsync(account);
        }
        
        public bool ChangePassword(DeCryptoWPF.DeCryptoServices.Account account, string newPassword) {
            return base.Channel.ChangePassword(account, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(DeCryptoWPF.DeCryptoServices.Account account, string newPassword) {
            return base.Channel.ChangePasswordAsync(account, newPassword);
        }
        
        public bool CurrentPassword(DeCryptoWPF.DeCryptoServices.Account account, string currentPasswor) {
            return base.Channel.CurrentPassword(account, currentPasswor);
        }
        
        public System.Threading.Tasks.Task<bool> CurrentPasswordAsync(DeCryptoWPF.DeCryptoServices.Account account, string currentPasswor) {
            return base.Channel.CurrentPasswordAsync(account, currentPasswor);
        }
        
        public bool ExistAccount(string email) {
            return base.Channel.ExistAccount(email);
        }
        
        public System.Threading.Tasks.Task<bool> ExistAccountAsync(string email) {
            return base.Channel.ExistAccountAsync(email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IPlayerServices")]
    public interface IPlayerServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerServices/RegisterPlayerResponse")]
        bool RegisterPlayer(DeCryptoWPF.DeCryptoServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerServices/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<bool> RegisterPlayerAsync(DeCryptoWPF.DeCryptoServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/GetSimilarsNickNames", ReplyAction="http://tempuri.org/IPlayerServices/GetSimilarsNickNamesResponse")]
        string[] GetSimilarsNickNames(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/GetSimilarsNickNames", ReplyAction="http://tempuri.org/IPlayerServices/GetSimilarsNickNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetSimilarsNickNamesAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/ExistNickname", ReplyAction="http://tempuri.org/IPlayerServices/ExistNicknameResponse")]
        bool ExistNickname(string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/ExistNickname", ReplyAction="http://tempuri.org/IPlayerServices/ExistNicknameResponse")]
        System.Threading.Tasks.Task<bool> ExistNicknameAsync(string nickName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServicesChannel : DeCryptoWPF.DeCryptoServices.IPlayerServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerServicesClient : System.ServiceModel.ClientBase<DeCryptoWPF.DeCryptoServices.IPlayerServices>, DeCryptoWPF.DeCryptoServices.IPlayerServices {
        
        public PlayerServicesClient() {
        }
        
        public PlayerServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterPlayer(DeCryptoWPF.DeCryptoServices.User user) {
            return base.Channel.RegisterPlayer(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPlayerAsync(DeCryptoWPF.DeCryptoServices.User user) {
            return base.Channel.RegisterPlayerAsync(user);
        }
        
        public string[] GetSimilarsNickNames(string nickname) {
            return base.Channel.GetSimilarsNickNames(nickname);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSimilarsNickNamesAsync(string nickname) {
            return base.Channel.GetSimilarsNickNamesAsync(nickname);
        }
        
        public bool ExistNickname(string nickName) {
            return base.Channel.ExistNickname(nickName);
        }
        
        public System.Threading.Tasks.Task<bool> ExistNicknameAsync(string nickName) {
            return base.Channel.ExistNicknameAsync(nickName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IJoinToGame", CallbackContract=typeof(DeCryptoWPF.DeCryptoServices.IJoinToGameCallback))]
    public interface IJoinToGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/CreateRoom", ReplyAction="http://tempuri.org/IJoinToGame/CreateRoomResponse")]
        int CreateRoom();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/CreateRoom", ReplyAction="http://tempuri.org/IJoinToGame/CreateRoomResponse")]
        System.Threading.Tasks.Task<int> CreateRoomAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToRoom")]
        void JoinToRoom(int code, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToRoom")]
        System.Threading.Tasks.Task JoinToRoomAsync(int code, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/LeaveRoom", ReplyAction="http://tempuri.org/IJoinToGame/LeaveRoomResponse")]
        void LeaveRoom(string nickname, int code, DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, DeCryptoWPF.DeCryptoServices.RedTeam redTeam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/LeaveRoom", ReplyAction="http://tempuri.org/IJoinToGame/LeaveRoomResponse")]
        System.Threading.Tasks.Task LeaveRoomAsync(string nickname, int code, DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, DeCryptoWPF.DeCryptoServices.RedTeam redTeam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/AllreadyExistRoom", ReplyAction="http://tempuri.org/IJoinToGame/AllreadyExistRoomResponse")]
        bool AllreadyExistRoom(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/AllreadyExistRoom", ReplyAction="http://tempuri.org/IJoinToGame/AllreadyExistRoomResponse")]
        System.Threading.Tasks.Task<bool> AllreadyExistRoomAsync(int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToBlueTeam")]
        void JoinToBlueTeam(DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToBlueTeam")]
        System.Threading.Tasks.Task JoinToBlueTeamAsync(DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToRedTeam")]
        void JoinToRedTeam(DeCryptoWPF.DeCryptoServices.RedTeam redTeam, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/JoinToRedTeam")]
        System.Threading.Tasks.Task JoinToRedTeamAsync(DeCryptoWPF.DeCryptoServices.RedTeam redTeam, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/JoinToGame", ReplyAction="http://tempuri.org/IJoinToGame/JoinToGameResponse")]
        void JoinToGame(string nickname, byte[] profilePicture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/JoinToGame", ReplyAction="http://tempuri.org/IJoinToGame/JoinToGameResponse")]
        System.Threading.Tasks.Task JoinToGameAsync(string nickname, byte[] profilePicture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/LeaveGame", ReplyAction="http://tempuri.org/IJoinToGame/LeaveGameResponse")]
        void LeaveGame(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/LeaveGame", ReplyAction="http://tempuri.org/IJoinToGame/LeaveGameResponse")]
        System.Threading.Tasks.Task LeaveGameAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/IsFullRoom", ReplyAction="http://tempuri.org/IJoinToGame/IsFullRoomResponse")]
        bool IsFullRoom(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/IsFullRoom", ReplyAction="http://tempuri.org/IJoinToGame/IsFullRoomResponse")]
        System.Threading.Tasks.Task<bool> IsFullRoomAsync(int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/SendFriendRequest")]
        void SendFriendRequest(string senderNickname, string recipientNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJoinToGame/SendFriendRequest")]
        System.Threading.Tasks.Task SendFriendRequestAsync(string senderNickname, string recipientNickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/GetFriendList", ReplyAction="http://tempuri.org/IJoinToGame/GetFriendListResponse")]
        System.Collections.Generic.Dictionary<string, byte[]> GetFriendList(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/GetFriendList", ReplyAction="http://tempuri.org/IJoinToGame/GetFriendListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, byte[]>> GetFriendListAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/AcceptFriendRequest", ReplyAction="http://tempuri.org/IJoinToGame/AcceptFriendRequestResponse")]
        bool AcceptFriendRequest(string senderNickname, string recipientNickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/AcceptFriendRequest", ReplyAction="http://tempuri.org/IJoinToGame/AcceptFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> AcceptFriendRequestAsync(string senderNickname, string recipientNickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJoinToGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/RecivePlayers", ReplyAction="http://tempuri.org/IJoinToGame/RecivePlayersResponse")]
        void RecivePlayers(System.Collections.Generic.Dictionary<string, byte[]> profiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/ReciveBlueTeam", ReplyAction="http://tempuri.org/IJoinToGame/ReciveBlueTeamResponse")]
        void ReciveBlueTeam(DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/ReciveRedTeam", ReplyAction="http://tempuri.org/IJoinToGame/ReciveRedTeamResponse")]
        void ReciveRedTeam(DeCryptoWPF.DeCryptoServices.RedTeam redTeam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinToGame/ReciveFriendRequest", ReplyAction="http://tempuri.org/IJoinToGame/ReciveFriendRequestResponse")]
        void ReciveFriendRequest(string senderNickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJoinToGameChannel : DeCryptoWPF.DeCryptoServices.IJoinToGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JoinToGameClient : System.ServiceModel.DuplexClientBase<DeCryptoWPF.DeCryptoServices.IJoinToGame>, DeCryptoWPF.DeCryptoServices.IJoinToGame {
        
        public JoinToGameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public JoinToGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public JoinToGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public JoinToGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public JoinToGameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int CreateRoom() {
            return base.Channel.CreateRoom();
        }
        
        public System.Threading.Tasks.Task<int> CreateRoomAsync() {
            return base.Channel.CreateRoomAsync();
        }
        
        public void JoinToRoom(int code, string nickname) {
            base.Channel.JoinToRoom(code, nickname);
        }
        
        public System.Threading.Tasks.Task JoinToRoomAsync(int code, string nickname) {
            return base.Channel.JoinToRoomAsync(code, nickname);
        }
        
        public void LeaveRoom(string nickname, int code, DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, DeCryptoWPF.DeCryptoServices.RedTeam redTeam) {
            base.Channel.LeaveRoom(nickname, code, blueTeam, redTeam);
        }
        
        public System.Threading.Tasks.Task LeaveRoomAsync(string nickname, int code, DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, DeCryptoWPF.DeCryptoServices.RedTeam redTeam) {
            return base.Channel.LeaveRoomAsync(nickname, code, blueTeam, redTeam);
        }
        
        public bool AllreadyExistRoom(int code) {
            return base.Channel.AllreadyExistRoom(code);
        }
        
        public System.Threading.Tasks.Task<bool> AllreadyExistRoomAsync(int code) {
            return base.Channel.AllreadyExistRoomAsync(code);
        }
        
        public void JoinToBlueTeam(DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, int code) {
            base.Channel.JoinToBlueTeam(blueTeam, code);
        }
        
        public System.Threading.Tasks.Task JoinToBlueTeamAsync(DeCryptoWPF.DeCryptoServices.BlueTeam blueTeam, int code) {
            return base.Channel.JoinToBlueTeamAsync(blueTeam, code);
        }
        
        public void JoinToRedTeam(DeCryptoWPF.DeCryptoServices.RedTeam redTeam, int code) {
            base.Channel.JoinToRedTeam(redTeam, code);
        }
        
        public System.Threading.Tasks.Task JoinToRedTeamAsync(DeCryptoWPF.DeCryptoServices.RedTeam redTeam, int code) {
            return base.Channel.JoinToRedTeamAsync(redTeam, code);
        }
        
        public void JoinToGame(string nickname, byte[] profilePicture) {
            base.Channel.JoinToGame(nickname, profilePicture);
        }
        
        public System.Threading.Tasks.Task JoinToGameAsync(string nickname, byte[] profilePicture) {
            return base.Channel.JoinToGameAsync(nickname, profilePicture);
        }
        
        public void LeaveGame(string nickname) {
            base.Channel.LeaveGame(nickname);
        }
        
        public System.Threading.Tasks.Task LeaveGameAsync(string nickname) {
            return base.Channel.LeaveGameAsync(nickname);
        }
        
        public bool IsFullRoom(int code) {
            return base.Channel.IsFullRoom(code);
        }
        
        public System.Threading.Tasks.Task<bool> IsFullRoomAsync(int code) {
            return base.Channel.IsFullRoomAsync(code);
        }
        
        public void SendFriendRequest(string senderNickname, string recipientNickname) {
            base.Channel.SendFriendRequest(senderNickname, recipientNickname);
        }
        
        public System.Threading.Tasks.Task SendFriendRequestAsync(string senderNickname, string recipientNickname) {
            return base.Channel.SendFriendRequestAsync(senderNickname, recipientNickname);
        }
        
        public System.Collections.Generic.Dictionary<string, byte[]> GetFriendList(string nickname) {
            return base.Channel.GetFriendList(nickname);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, byte[]>> GetFriendListAsync(string nickname) {
            return base.Channel.GetFriendListAsync(nickname);
        }
        
        public bool AcceptFriendRequest(string senderNickname, string recipientNickname) {
            return base.Channel.AcceptFriendRequest(senderNickname, recipientNickname);
        }
        
        public System.Threading.Tasks.Task<bool> AcceptFriendRequestAsync(string senderNickname, string recipientNickname) {
            return base.Channel.AcceptFriendRequestAsync(senderNickname, recipientNickname);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeCryptoServices.IChatMessage", CallbackContract=typeof(DeCryptoWPF.DeCryptoServices.IChatMessageCallback))]
    public interface IChatMessage {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMessage/SendMessage")]
        void SendMessage(DeCryptoWPF.DeCryptoServices.ChatMessage chatMessage, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMessage/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(DeCryptoWPF.DeCryptoServices.ChatMessage chatMessage, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMessage/JoinChat")]
        void JoinChat(string nickname, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMessage/JoinChat")]
        System.Threading.Tasks.Task JoinChatAsync(string nickname, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMessage/LeaveChat", ReplyAction="http://tempuri.org/IChatMessage/LeaveChatResponse")]
        void LeaveChat(string nickname, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMessage/LeaveChat", ReplyAction="http://tempuri.org/IChatMessage/LeaveChatResponse")]
        System.Threading.Tasks.Task LeaveChatAsync(string nickname, int code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatMessageCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMessage/ReceiveChatMessages", ReplyAction="http://tempuri.org/IChatMessage/ReceiveChatMessagesResponse")]
        void ReceiveChatMessages(DeCryptoWPF.DeCryptoServices.ChatMessage[] messages);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatMessageChannel : DeCryptoWPF.DeCryptoServices.IChatMessage, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatMessageClient : System.ServiceModel.DuplexClientBase<DeCryptoWPF.DeCryptoServices.IChatMessage>, DeCryptoWPF.DeCryptoServices.IChatMessage {
        
        public ChatMessageClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatMessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatMessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatMessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatMessageClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(DeCryptoWPF.DeCryptoServices.ChatMessage chatMessage, int code) {
            base.Channel.SendMessage(chatMessage, code);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(DeCryptoWPF.DeCryptoServices.ChatMessage chatMessage, int code) {
            return base.Channel.SendMessageAsync(chatMessage, code);
        }
        
        public void JoinChat(string nickname, int code) {
            base.Channel.JoinChat(nickname, code);
        }
        
        public System.Threading.Tasks.Task JoinChatAsync(string nickname, int code) {
            return base.Channel.JoinChatAsync(nickname, code);
        }
        
        public void LeaveChat(string nickname, int code) {
            base.Channel.LeaveChat(nickname, code);
        }
        
        public System.Threading.Tasks.Task LeaveChatAsync(string nickname, int code) {
            return base.Channel.LeaveChatAsync(nickname, code);
        }
    }
}
